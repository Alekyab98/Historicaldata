CREATE OR REPLACE PROCEDURE ${aether_5g_core_module_tgt_dataset_name}.aether_smf_performance_sp(process_ts STRING, trans_ts STRING, window_hour INT64, window_interval INT64)
OPTIONS(strict_mode = False)
BEGIN
  -- Insert entry into audit table
  MERGE
    `${target_project_id}.${audit_tgt_dataset_name}.${audit_target_tblname}` tgt
  USING
    (
    SELECT
      CONCAT("5g core smf hourly process") AS prc_name,
      SAFE_CAST(trans_ts AS DATETIME) AS start_time,
      SAFE_CAST(SPLIT(trans_ts, ' ')[OFFSET(0)] AS DATE) src_prc_dt
    ) src
  ON (src.prc_name = tgt.PROCESS_NAME AND src.START_TIME = tgt.START_TIME)
  WHEN NOT MATCHED THEN
  INSERT (
    PROCESS_MODULE,
    SCHEDULER,
    PROCESS_NAME,
    SOURCE_NAME,
    TARGET_NAME,
    START_TIME,
    END_TIME,
    PROCESS_DT,
    NUM_RECORDS_AFFECTED,
    STATUS,
    RETURN_MESSAGE)
  VALUES (
    "aether",
    "airflow",
    prc_name,
    "${aether_5g_core_module_src_project_id}.${aether_5g_core_module_src_dataset_name}.${aether_5g_core_module_src_smf_tblname}",
    "${aether_5g_core_module_tgt_project_id}.${aether_5g_core_module_tgt_dataset_name}.${aether_5g_core_module_tgt_smf_tblname}",
    start_time,
    NULL,
    src_prc_dt,
    NULL,
    "Started",
    NULL
  );

  -- Merge data into the target table
  MERGE INTO `${aether_5g_core_module_tgt_project_id}.${aether_5g_core_module_tgt_dataset_name}.${aether_5g_core_module_tgt_smf_tblname}` tgt
  USING (
    SELECT
      event_time,
      "ericsson" AS vendor,
      fqdn,
      final_labels AS labels,
      KEY AS metric_name,
      SAFE_CAST(increase_value AS BIGNUMERIC) AS metric_increase_value,
      SAFE_CAST(sum_value AS BIGNUMERIC) AS metric_sum_value,
      trans_dt,
      DATETIME(process_ts) AS schedule_time,
      CURRENT_TIMESTAMP() AS updated_timestamp
    FROM (
      WITH event_timestamps AS (
        SELECT DISTINCT
          DATETIME_TRUNC(TIMESTAMP(`timestamp`), HOUR) AS trans_hr
        FROM
          `${aether_5g_core_module_src_project_id}.${aether_5g_core_module_src_dataset_name}.${aether_5g_core_module_src_smf_tblname}`
        WHERE
          DATETIME_TRUNC(TIMESTAMP(insert_date_utc), HOUR) IN UNNEST(GENERATE_TIMESTAMP_ARRAY(
            TIMESTAMP_SUB(DATETIME_TRUNC(TIMESTAMP(trans_ts), HOUR), INTERVAL window_interval - 1 HOUR),
            DATETIME_TRUNC(TIMESTAMP(trans_ts), HOUR),
            INTERVAL window_hour HOUR
          ))
          AND trans_dt IS NOT NULL
      ),
      base_data AS (
        SELECT *,
          MD5(labels) AS checksum
        FROM (
          SELECT DISTINCT
            TIMESTAMP_SECONDS(CAST(FLOOR(UNIX_SECONDS(`timestamp`) / (window_hour * 60 * 60)) * (window_hour * 60 * 60) AS INT64)) AS event_time,
            fqdn,
            -- Parse the incoming JSON string
            SAFE.PARSE_JSON(labels) AS parsed_labels,
            -- Extract 'instance' from the parsed JSON
            JSON_EXTRACT_SCALAR(SAFE.PARSE_JSON(labels), '$.instance') AS instance,
            -- Remove unwanted keys from the parsed JSON
            TO_JSON(
              JSON_REMOVE(SAFE.PARSE_JSON(labels), '$.__name__', '$.jobid', '$.job', '$.localdn', '$.write_relabel_group', '$.kubernetes_namespace', '$.kubernetes_pod_name', '$.applicationId')
            ) AS cleaned_labels,
            LOWER(name) AS KEY,
            SAFE_CAST(NULLIF(value, 'NaN') AS FLOAT64) AS value,
            DATE(`timestamp`) AS trans_dt,
            `timestamp`
          FROM
            `${aether_5g_core_module_src_project_id}.${aether_5g_core_module_src_dataset_name}.${aether_5g_core_module_src_smf_tblname}`
          WHERE
            DATETIME_TRUNC(TIMESTAMP(`timestamp`), HOUR) IN (SELECT trans_hr FROM event_timestamps)
            AND insert_date_utc > (SELECT MIN(trans_hr) FROM event_timestamps)
            AND trans_dt IN (SELECT DATE(trans_hr) FROM event_timestamps)
            AND trans_dt IS NOT NULL
        )
      ),
      window_data AS (
        SELECT *,
          IF(value < prev_value, 1, 0) AS has_reset
        FROM (
          SELECT
            trans_dt,
            event_time,
            fqdn,
            cleaned_labels,
            instance,
            checksum,
            KEY,
            value,
            `timestamp`,
            SAFE_CAST(LAG(value) OVER (PARTITION BY fqdn, checksum, instance, KEY ORDER BY `timestamp`) AS FLOAT64) AS prev_value
          FROM base_data
        )
      ),
      reset_adjusted AS (
        SELECT
          event_time,
          fqdn,
          trans_dt,
          MAX(cleaned_labels) AS cleaned_labels,
          instance,
          checksum,
          KEY,
          SUM(value) AS sum_value,
          SUM(CASE
            WHEN prev_value IS NULL THEN 0
            WHEN has_reset = 1 THEN value
            ELSE value - IFNULL(prev_value, 0)
          END) AS increase_value
        FROM window_data
        GROUP BY
          trans_dt,
          event_time,
          fqdn,
          instance,
          checksum,
          KEY
      ),
      final_data AS (
        SELECT
          event_time,
          fqdn,
          trans_dt,
          -- Insert 'instance' back into the cleaned JSON object
          JSON_INSERT(cleaned_labels, '$.instance', instance) AS final_labels,
          checksum,
          KEY,
          increase_value,
          sum_value
        FROM reset_adjusted
      )
      SELECT
        event_time,
        fqdn,
        trans_dt,
        final_labels,
        checksum,
        KEY,
        increase_value,
        sum_value
      FROM final_data
    )
  ) src
  ON tgt.trans_dt = src.trans_dt
  AND tgt.event_time = src.event_time
  AND tgt.fqdn = src.fqdn
  AND tgt.metric_name = src.metric_name
  AND tgt.vendor = src.vendor
  AND MD5(TO_JSON_STRING(tgt.labels)) = MD5(TO_JSON_STRING(src.final_labels))
  AND tgt.trans_dt IS NOT NULL
  WHEN MATCHED THEN
    UPDATE SET
      tgt.labels = src.final_labels,
      tgt.metric_increase_value = src.metric_increase_value,
      tgt.metric_sum_value = src.metric_sum_value,
      tgt.schedule_time = src.schedule_time,
      tgt.updated_timestamp = src.updated_timestamp
  WHEN NOT MATCHED THEN
    INSERT (
      event_time,
      vendor,
      fqdn,
      labels,
      metric_name,
      metric_increase_value,
      metric_sum_value,
      trans_dt,
      schedule_time,
      updated_timestamp
    )
    VALUES (
      src.event_time,
      src.vendor,
      src.fqdn,
      src.final_labels,
      src.metric_name,
      src.metric_increase_value,
      src.metric_sum_value,
      src.trans_dt,
      src.schedule_time,
      src.updated_timestamp
    );

  -- Update audit table with completed status
  UPDATE
    `${target_project_id}.${audit_tgt_dataset_name}.${audit_target_tblname}`
  SET
    END_TIME = CURRENT_DATETIME(),
    NUM_RECORDS_AFFECTED = @@ROW_COUNT,
    STATUS = "Completed",
    RETURN_MESSAGE = "Success"
  WHERE
    PROCESS_NAME = CONCAT("5g core smf hourly process")
    AND start_time = SAFE_CAST(trans_ts AS DATETIME);

  SELECT "Process Completed Successfully";

EXCEPTION
  WHEN ERROR THEN
    -- Update audit table with error status
    UPDATE `${target_project_id}.${audit_tgt_dataset_name}.${audit_target_tblname}`
    SET END_TIME = CURRENT_DATETIME(),
      STATUS = "Error",
      RETURN_MESSAGE = CONCAT(@@error.message, '------***----', @@error.statement_text)
    WHERE PROCESS_NAME = CONCAT("5g core smf hourly process")
      AND start_time = SAFE_CAST(trans_ts AS DATETIME);

    RAISE USING message = @@error.message;
END;
